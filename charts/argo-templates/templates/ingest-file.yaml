{{- if .Values.ingestFile.create }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ .Values.ingestFile.name }}
spec:
  templates:
    - name: main
      inputs:
        parameters:
          - name: url
          - name: dataset-id
          - name: profile-id
          - name: gcs-bucket
          - name: gcs-file-path
          - name: target-path
          - name: timeout
          - name: sa-secret
          - name: sa-secret-key
      dag:
        tasks:
          # Submit the ingest request to Jade
          - name: submit-file-ingest
            dependencies: [check-existing-file]
            template: submit-file-ingest
            when: '{{ "{{tasks.check-existing-file.outputs.result}} == false" }}'
            arguments:
              parameters:
                - name: api-url
                  value: '{{ "{{inputs.parameters.url}}" }}'
                - name: dataset-id
                  value: '{{ "{{inputs.parameters.dataset-id}}" }}'
                - name: profile-id
                  value: '{{ "{{inputs.parameters.profile-id}}" }}'
                - name: source-path
                  value: gs://{{ "{{inputs.parameters.gcs-bucket}}" }}/{{ "{{inputs.parameters.gcs-file-path}}" }}
                - name: target-path
                  value: '{{ "{{inputs.parameters.target-path}}" }}'
                - name: sa-secret
                  value: '{{ "{{inputs.parameters.sa-secret}}" }}'
                - name: sa-secret-key
                  value: '{{ "{{inputs.parameters.sa-secret-key}}" }}'

          # Poll the ingest job for the file repeatedly until the file has been ingested
          - name: poll-ingest-job
            dependencies: [submit-file-ingest]
            template: poll-ingest-job
            when: '{{ "{{tasks.check-existing-file.outputs.result}} == false" }}'
            arguments:
              parameters:
                - name: api-url
                  value: '{{ "{{inputs.parameters.url}}" }}'
                - name: job-id
                  value: '{{ "{{tasks.submit-file-ingest.outputs.result}}" }}'
                - name: timeout
                  value: '{{ "{{inputs.parameters.timeout}}" }}'
                - name: sa-secret
                  value: '{{ "{{inputs.parameters.sa-secret}}" }}'
                - name: sa-secret-key
                  value: '{{ "{{inputs.parameters.sa-secret-key}}" }}'

          # Return the fileId
          - name: get-job-result
            dependencies: [poll-ingest-job]
            template: get-job-result
            when: '{{ "{{tasks.check-existing-file.outputs.result}} == false" }}'
            arguments:
              parameters:
                - name: api-url
                  value: '{{ "{{inputs.parameters.url}}" }}'
                - name: job-id
                  value: '{{ "{{tasks.submit-file-ingest.outputs.result}}" }}'
                - name: sa-secret
                  value: '{{ "{{inputs.parameters.sa-secret}}" }}'
                - name: sa-secret-key
                  value: '{{ "{{inputs.parameters.sa-secret-key}}" }}'
      outputs:
        parameters:
          - name: file-exists
            valueFrom:
              parameter: '{{ "{{tasks.check-existing-file.outputs.result}}" }}'
          - name: file-id
            valueFrom:
              parameter: '{{ "{{tasks.get-job-result.outputs.result}}" }}'
              default: 'null'

    # SubTemplates
    {{- include "argo.poll-ingest-job" . | indent 4 }}

    - name: submit-file-ingest
      inputs:
        parameters:
          - name: api-url
          - name: dataset-id
          - name: profile-id
          - name: source-path
          - name: target-path
          - name: sa-secret
          - name: sa-secret-key
      volumes:
        - name: sa-secret-volume
          secret:
            secretName: '{{ "{{inputs.parameters.sa-secret}}" }}'
      script:
        image: us.gcr.io/broad-dsp-gcr-public/monster-auth-req-py:1.0.1
        env:
          - name: API_URL
            value: '{{ "{{inputs.parameters.api-url}}" }}'
          - name: DATASET_ID
            value: '{{ "{{inputs.parameters.dataset-id}}" }}'
          - name: PROFILE_ID
            value: '{{ "{{inputs.parameters.profile-id}}" }}'
          - name: SOURCE_PATH
            value: '{{ "{{inputs.parameters.source-path}}" }}'
          - name: TARGET_PATH
            value: '{{ "{{inputs.parameters.target-path}}" }}'
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: '{{ "/secret/{{inputs.parameters.sa-secret-key}}" }}'
        volumeMounts:
          - name: sa-secret-volume
            mountPath: /secret
        command: [python]
        source: |
        {{- include "argo.render-lines" (.Files.Lines "scripts/submit-file-ingest.py") | indent 10 }}

    - name: get-job-result
      inputs:
        parameters:
          - name: api-url
          - name: job-id
          - name: sa-secret
          - name: sa-secret-key
      volumes:
        - name: sa-secret-volume
          secret:
            secretName: '{{ "{{inputs.parameters.sa-secret}}" }}'
      script:
        image: us.gcr.io/broad-dsp-gcr-public/monster-auth-req-py:1.0.1
        env:
          - name: API_URL
            value: '{{ "{{inputs.parameters.api-url}}" }}'
          - name: JOB_ID
            value: '{{ "{{inputs.parameters.job-id}}" }}'
          - name: RESULT_FIELD
            value: fileId
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: '{{ "/secret/{{inputs.parameters.sa-secret-key}}" }}'
        volumeMounts:
          - name: sa-secret-volume
            mountPath: /secret
        command: [python]
        source: |
        {{- include "argo.render-lines" (.Files.Lines "scripts/get-job-result.py") | indent 10 }}
{{- end }}
