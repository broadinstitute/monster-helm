#!/usr/bin/env bash
set -euo pipefail

declare -r SCRIPT_DIR=$(cd $(dirname ${0}) >/dev/null 2>&1 && pwd)
declare -r REPO_ROOT=$(cd $(dirname ${SCRIPT_DIR}) >/dev/null 2>&1 && pwd)
declare -r DEPLOY_DIR=${REPO_ROOT}/.deploy

declare -r HELM=lachlanevenson/k8s-helm:v3.0.2
declare -r CHART_RELEASER=quay.io/helmpack/chart-releaser:v0.2.3

function join_by () { local IFS="$1"; shift; echo "$*"; }

function count_changed_files () {
  expr $(git -C ${REPO_ROOT} status --porcelain 2>/dev/null | wc -l)
}

function check_chart_names () {
  for chart in ${@}; do
    if ! stat -q ${REPO_ROOT}/charts/${chart} > /dev/null; then
      1>&2 echo Error: Chart ${chart} does not exist
      exit 1
    fi
  done
}

function package_charts () {
  local -ra chart_paths=(${@/#/'/charts/'})

  # Clean out any leftover packages.
  rm -f ${DEPLOY_DIR}/*

  # Create new packages from current versions.
  docker run --rm -it \
    -v ${REPO_ROOT}/charts:/charts \
    -v ${DEPLOY_DIR}:/deploy \
    ${HELM} package ${chart_paths[@]} --destination /deploy
}

function upload_charts () {
  local -ra upload_command=(
    cr upload
    # GitHub organization.
    -o broadinstitute
    # GitHub repository.
    -r monster-helm
    # Location of packaged charts (within Docker container).
    -p /deploy
    # Access token.
    -t ${CH_TOKEN}
  )

  # Run the command in Docker to avoid version skew.
  docker run --rm -it \
    -v ${DEPLOY_DIR}:/deploy \
    ${CHART_RELEASER} \
    ${upload_command[@]}
}

function index_charts () {
  local -r commit_message=$1
  local -ra index_command=(
    cr index
    # Helm chart URL.
    -c https://broadinstitute.github.io/monster-helm
    # GitHub organization.
    -o broadinstitute
    # GitHub repository.
    -r monster-helm
    # Location of packaged charts (used for calculating hashes).
    -p /deploy
    # Location where the index should be written.
    -i /index.yaml
    # Access token.
    -t ${CH_TOKEN}
  )

  # Run on the GitHub pages branch so we can commit &
  # push the updated index.
  git -C ${REPO_ROOT} checkout gh-pages

  # Run the command in Docker to avoid version skew.
  docker run --rm -it \
    -v ${DEPLOY_DIR}:/deploy \
    -v ${REPO_ROOT}/index.yaml:/index.yaml \
    ${CHART_RELEASER} \
    ${index_command[@]}

  # Commit & push the updated index file.
  git -C ${REPO_ROOT} commit -am "${commit_message}"
  git push origin gh-pages
}

function main () {
  if [ $# -eq 0 ]; then
    1>&2 echo Usage: $0 '<chart1>' '<chart2>' ...
    exit 1
  fi

  if [ -z ${CH_TOKEN:-""} ]; then
    1>&2 echo Error: "'CH_TOKEN'" must be set in environment to publish charts
    exit 1
  fi

  if [ $(count_changed_files) -ne 0 ]; then
    1>&2 echo Error: Cannot publish charts when Git index is dirty
    exit 1
  fi

  declare -ra charts=${@}
  check_chart_names ${charts[@]}

  declare -r chart_str=$(join_by , ${charts[@]})
  declare -r current_branch=$(git -C ${REPO_ROOT} rev-parse --abbrev-ref HEAD)
  trap "git -C ${REPO_ROOT} checkout ${current_branch} &> /dev/null" EXIT

  1>&2 echo Packaging 'chart(s)': ${chart_str}
  package_charts ${charts[@]}
  1>&2 echo Uploading 'chart(s)': ${chart_str}
  upload_charts
  1>&2 echo Indexing 'chart(s)': ${chart_str}
  index_charts "Index new version(s) of: ${chart_str}"
}

main ${@}
